# -*- mode: shell-script -*-
#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# don't alias run-help to man, use it to get help on builtins (or Alt-H)
[[ -n $(alias run-help) ]] && unalias run-help
autoload run-help

################################################################################
# OS X pre-customization

if [[ "$OSTYPE" == darwin* ]]; then
  # get colors with homebrew GNU ls
  alias dircolors='gdircolors'
fi

# set help if we're using the system-wide homebrew version of zsh
if [[ $( which zsh ) == /usr/local/bin/zsh ]]; then
  HELPDIR=/usr/local/share/zsh/help
fi

# set help if we're using the per-user linuxbrew version of zsh
if [[ $( which zsh ) == "$HOME/.linuxbrew/bin/zsh" ]]; then
  HELPDIR="$HOME/.linuxbrew/share/zsh/help"
fi

################################################################################
# Source Prezto.

if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

################################################################################
# Aliases

# if mvim/vim is available, alias it to vi and vim
if (( $+commands[nvim] )); then
  alias vi=nvim
else
  alias vi=vim
fi

alias fzf="fzf --preview 'head -100 {}'"

alias ec='emacsclient -ca ""'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

alias crontab='EDITOR=vi crontab'

alias iperl='rlwrap -A -S "iperl> " perl -MData::Printer -wnE '\''BEGIN { say "# Use `p @<arrayOrList>` or `p %<hashTable>` to print arrays/lists/hashtables; e.g.: `p %ENV`"; } say eval()//$@'\'

alias nixwitch="sudo nixos-rebuild switch -I nixpkgs=$HOME/src/nixpkgs"

alias nice="nice -n19 ionice -c3"

alias mysql="nocorrect mysql --pager=less"

alias ll="ls -lrthF"
alias la="ll -A"

################################################################################
# Functions

function tth {
  # use a fancy tmux modeline (breaks iTerm2 integration in cch())
  ssh -t $@ "tmux new -AD -s default"
}

function eeh {
  ssh -t $@ "emacsclient -t -a ''"
}

function cch {
  # if no session is running, attach falls back to any sessions defined in
  # ~/.tmux.conf (a line with `new` suffices)
  ssh -t $@ "tmux -CC new -AD -s default"
}

function trash {
  trash="$HOME/.trash/"
  mkdir "$trash"
  if [[ "$OSTYPE" == darwin* ]]; then
    mv $@ "$trash"
  else
    mv -t "$trash" $@
  fi
}

function bat {
  typeset -A opts
  # delimiter character
  opts[-d]='	'
  # less scroll width
  opts[-s]=3
  zparseopts -D -E -K -A opts d: s:
  cat $1 - |
    column -ts"$opts[-d]" $1 |
    less -NS -\#$opts[-s]
}

function sdiff {
  if [[ $# -ne 2 ]]; then
    echo >&2 "Usage: sdiff file1 file2"
    return 1
  fi
  tmpdir=$(mktemp -d)
  file1=$tmpdir/$1
  file2=$tmpdir/$2
  setopt NO_MONITOR
  sort $1 -o $file1 &
  sort1=$!
  sort $2 -o $file2 &
  sort2=$!
  wait $sort1 $sort2
  setopt MONITOR
  diff $file1 $file2
}

function czech {
  setfont Lat2-Terminus16 -m 8859-2
  sudo loadkeys cz-qwerty
}

function english {
  setfont Lat2-Terminus16 -m 8859-2
  sudo loadkeys us
}

function o {
  if (( $# == 0 )); then
    open .
  else
    open $@
  fi
}

# `ldd` and `ldd -v` are unsafe because they execute parts of the binary they're
# examining for deps. They also have not so nice output. The following two
# functions improve on both those fronts. They were borrowed from here:
# https://www.reddit.com/r/rust/comments/56x4r3/are_golang_binaries_more_portable_than_binaries/d8neaaj/

# List non-transitive deps of dynamically linked ELF file
function deplibs {
  readelf -d "$1" | grep --line-buffered NEEDED | cut -d [ -f 2 | cut -d ] -f 1
}

# List all deps of dynamically linked ELF file
function deplibs-tree {
  local -A SEEN_LIBS

  function deplibs-recursive() {
    local LIB="$1" PARENT="$2"

    if [[ -z "$PARENT" ]]; then
      SEEN_LIBS[$LIB]="    "
      echo -n "${LIB}"
    else
      echo -n "${SEEN_LIBS[$PARENT]}"
      echo -n "${LIB}"
      if [[ -n "${SEEN_LIBS[$LIB]}" ]]; then
        echo " (already seen)"
        return
      else
        SEEN_LIBS[$LIB]="    ${SEEN_LIBS[$PARENT]}"
      fi
    fi

    echo ""

    for CHILD in $(deplibs "$(cc -print-file-name="$LIB")"); do
      deplibs-recursive "$CHILD" "$LIB"
    done
  }

  deplibs-recursive "$1"
}

function fd-fzf-open {
  local prog=$1
  local -a fd_opts prog_opts fpaths
  local last_fd_opt_idx=$@[(i)--]
  fd_opts=($@[2,last_fd_opt_idx-1])
  prog_opts=($@[last_fd_opt_idx+1,-1])
  local fpaths=($(fd $fd_opts | fzf -m))
  if [[ ! -z $fpaths ]]; then
    local -a cmd
    cmd=($prog $prog_opts $fpaths)
    # add command to history
    print -s $cmd
    $cmd
  fi
}
alias vif='fd-fzf-open vi --type file --'
alias via='fd-fzf-open vi --type file --follow --hidden --exclude .git --'
alias of='fd-fzf-open o --type file --'
alias cf='fd-fzf-open cd'

################################################################################
# Miscellaneous

# non-prezto zsh settings
zstyle ':completion:*' special-dirs true

# tmux pane title with current dir (the window title is set according to
# the pane title of the active pane, cf. .tmux.conf); search for #T and
# NAMES AND TITLES in man tmux for more info
case "$TERM" in
  screen*)
    precmd () {
      local pwd="${PWD/#$HOME/~}"

      if [[ "$pwd" == (#m)[/~] ]]; then
        _tmux_pwd="$MATCH"
        unset MATCH
      else
        _tmux_pwd="${${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}//\%/%%}/${${pwd:t}//\%/%%}"
      fi

      printf '\033]2;'$_tmux_pwd'\033\\'
    }
    ;;
esac

# change to the actual home dir if necessary to get a shorter prompt
[[ $PWD == '/home/lukes' ]] && cd

[[ -e ${HOME}/.iterm2_shell_integration.zsh ]] && source ${HOME}/.iterm2_shell_integration.zsh

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
